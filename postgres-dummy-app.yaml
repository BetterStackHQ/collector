apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-dummy-app
data:
  app.py: |
    import os
    import time
    import psycopg2
    from psycopg2.extras import RealDictCursor
    from flask import Flask, jsonify
    from datetime import datetime
    
    app = Flask(__name__)
    
    # Database connection details
    db_config = {
        'host': os.environ.get('POSTGRES_HOST', 'postgresql'),
        'port': int(os.environ.get('POSTGRES_PORT', 5432)),
        'database': 'postgres',
        'user': 'postgres',
        'password': os.environ.get('POSTGRES_PASSWORD', 'postgres')
    }
    
    def get_db_connection():
        return psycopg2.connect(**db_config)
    
    def init_db():
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            
            # Create users table
            cur.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(100) NOT NULL,
                    email VARCHAR(100) UNIQUE NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # Create logs table
            cur.execute('''
                CREATE TABLE IF NOT EXISTS activity_logs (
                    id SERIAL PRIMARY KEY,
                    action VARCHAR(200) NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            cur.close()
            conn.close()
            print("Database initialized successfully")
        except Exception as e:
            print(f"Error initializing database: {e}")
    
    @app.route('/')
    def home():
        return jsonify({
            "message": "PostgreSQL Dummy App",
            "endpoints": [
                "/health",
                "/users",
                "/users/create/<name>/<email>",
                "/users/<id>",
                "/logs",
                "/logs/add/<action>",
                "/stats"
            ]
        })
    
    @app.route('/health')
    def health():
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute('SELECT 1')
            cur.close()
            conn.close()
            return jsonify({"status": "healthy", "database": "connected"})
        except Exception as e:
            return jsonify({"status": "unhealthy", "error": str(e)}), 500
    
    @app.route('/users')
    def get_users():
        try:
            conn = get_db_connection()
            cur = conn.cursor(cursor_factory=RealDictCursor)
            cur.execute('SELECT * FROM users ORDER BY created_at DESC LIMIT 10')
            users = cur.fetchall()
            cur.close()
            conn.close()
            return jsonify({"status": "success", "users": users})
        except Exception as e:
            return jsonify({"status": "error", "error": str(e)}), 500
    
    @app.route('/users/create/<name>/<email>')
    def create_user(name, email):
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute(
                'INSERT INTO users (name, email) VALUES (%s, %s) RETURNING id',
                (name, email)
            )
            user_id = cur.fetchone()[0]
            
            # Log the action
            cur.execute(
                'INSERT INTO activity_logs (action) VALUES (%s)',
                (f'User created: {name} ({email})',)
            )
            
            conn.commit()
            cur.close()
            conn.close()
            return jsonify({"status": "success", "user_id": user_id, "name": name, "email": email})
        except Exception as e:
            return jsonify({"status": "error", "error": str(e)}), 500
    
    @app.route('/users/<int:user_id>')
    def get_user(user_id):
        try:
            conn = get_db_connection()
            cur = conn.cursor(cursor_factory=RealDictCursor)
            cur.execute('SELECT * FROM users WHERE id = %s', (user_id,))
            user = cur.fetchone()
            cur.close()
            conn.close()
            
            if user:
                return jsonify({"status": "success", "user": user})
            else:
                return jsonify({"status": "error", "error": "User not found"}), 404
        except Exception as e:
            return jsonify({"status": "error", "error": str(e)}), 500
    
    @app.route('/logs')
    def get_logs():
        try:
            conn = get_db_connection()
            cur = conn.cursor(cursor_factory=RealDictCursor)
            cur.execute('SELECT * FROM activity_logs ORDER BY timestamp DESC LIMIT 20')
            logs = cur.fetchall()
            cur.close()
            conn.close()
            return jsonify({"status": "success", "logs": logs})
        except Exception as e:
            return jsonify({"status": "error", "error": str(e)}), 500
    
    @app.route('/logs/add/<action>')
    def add_log(action):
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            cur.execute(
                'INSERT INTO activity_logs (action) VALUES (%s) RETURNING id',
                (action,)
            )
            log_id = cur.fetchone()[0]
            conn.commit()
            cur.close()
            conn.close()
            return jsonify({"status": "success", "log_id": log_id, "action": action})
        except Exception as e:
            return jsonify({"status": "error", "error": str(e)}), 500
    
    @app.route('/stats')
    def stats():
        try:
            conn = get_db_connection()
            cur = conn.cursor()
            
            # Get user count
            cur.execute('SELECT COUNT(*) FROM users')
            user_count = cur.fetchone()[0]
            
            # Get log count
            cur.execute('SELECT COUNT(*) FROM activity_logs')
            log_count = cur.fetchone()[0]
            
            # Get database size
            cur.execute("SELECT pg_database_size('postgres')")
            db_size = cur.fetchone()[0]
            
            cur.close()
            conn.close()
            
            return jsonify({
                "status": "success",
                "user_count": user_count,
                "log_count": log_count,
                "database_size_bytes": db_size,
                "database_size_mb": round(db_size / 1024 / 1024, 2)
            })
        except Exception as e:
            return jsonify({"status": "error", "error": str(e)}), 500
    
    if __name__ == '__main__':
        # Initialize database
        time.sleep(5)  # Wait for database to be ready
        init_db()
        
        # Background task to periodically write to database
        import threading
        
        def background_task():
            counter = 0
            while True:
                try:
                    counter += 1
                    conn = get_db_connection()
                    cur = conn.cursor()
                    cur.execute(
                        'INSERT INTO activity_logs (action) VALUES (%s)',
                        (f'Background task run #{counter} at {datetime.now()}',)
                    )
                    conn.commit()
                    cur.close()
                    conn.close()
                    print(f"Background task run #{counter}")
                except Exception as e:
                    print(f"Background task error: {e}")
                time.sleep(30)
        
        thread = threading.Thread(target=background_task)
        thread.daemon = True
        thread.start()
        
        app.run(host='0.0.0.0', port=5000)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-dummy-app
  labels:
    app: postgres-dummy-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: postgres-dummy-app
  template:
    metadata:
      labels:
        app: postgres-dummy-app
    spec:
      containers:
      - name: postgres-dummy-app
        image: python:3.9-slim
        ports:
        - containerPort: 5000
        env:
        - name: POSTGRES_HOST
          value: "postgresql"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgresql
              key: postgres-password
        command: ["/bin/sh"]
        args:
          - -c
          - |
            apt-get update && apt-get install -y libpq-dev gcc
            pip install flask psycopg2
            python /app/app.py
        volumeMounts:
        - name: app-code
          mountPath: /app
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
      volumes:
      - name: app-code
        configMap:
          name: postgres-dummy-app
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-dummy-app
  labels:
    app: postgres-dummy-app
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 5000
    protocol: TCP
  selector:
    app: postgres-dummy-app