name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically

    - name: Install dependencies
      run: bundle install

    - name: Run tests
      run: bundle exec rake test

    - name: Validate Docker compose build
      run: docker compose build --no-cache

  # The diff is expected to be:
  # 8a9,10
  # >     security_opt:
  # >       - seccomp=collector-seccomp.json
  # if there are more lines, it's likely drift and shouldn't be released
  docker-compose-match:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: check diff between docker-compose.yml and docker-compose.seccomp.yml
      run: |
        DIFF_LINES=$(diff docker-compose.yml docker-compose.seccomp.yml | wc -l)
        if [ "$DIFF_LINES" -ne 3 ]; then
          echo "ERROR: Expected exactly 3 lines of diff, but got $DIFF_LINES lines"
          echo "Diff output:"
          diff docker-compose.yml docker-compose.seccomp.yml
          exit 1
        fi
        echo "✓ Diff is exactly 3 lines as expected"

  # Check that swarm docker-compose files don't diverge too much from the main ones
  swarm-compose-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Check swarm compose files alignment
      run: |
        echo "=== Checking collector service alignment ==="
        
        # Compare collector images
        MAIN_IMAGE=$(sed -n '/^  collector:/,/^  [^ ]/p' docker-compose.yml | grep "image:" | head -1 | awk '{print $2}')
        SWARM_IMAGE=$(sed -n '/^  collector:/,/^  [^ ]/p' swarm/docker-compose.swarm-collector.yml | grep "image:" | head -1 | awk '{print $2}')
        
        if [ "$MAIN_IMAGE" != "$SWARM_IMAGE" ]; then
          echo "❌ ERROR: Collector image mismatch"
          echo "  Main:  $MAIN_IMAGE"
          echo "  Swarm: $SWARM_IMAGE"
          exit 1
        fi
        echo "✅ Both use collector image: $MAIN_IMAGE"
        
        # Compare healthchecks (should be identical)
        echo ""
        echo "=== Checking healthcheck configuration ==="
        sed -n '/^  collector:/,/^  [^ ]/p' docker-compose.yml | sed -n '/healthcheck:/,/^    [^ ]/p' | grep -v "^  [^ ]" > /tmp/main-health
        sed -n '/^  collector:/,/^  [^ ]/p' swarm/docker-compose.swarm-collector.yml | sed -n '/healthcheck:/,/^    [^ ]/p' | grep -v "^  [^ ]" > /tmp/swarm-health
        
        if diff -q /tmp/main-health /tmp/swarm-health > /dev/null 2>&1; then
          echo "✅ Healthcheck configurations are identical"
        else
          echo "❌ ERROR: Healthcheck configurations must be identical between files"
          echo ""
          echo "In docker-compose.yml, the collector healthcheck is:"
          cat /tmp/main-health | sed 's/^/  /'
          echo ""
          echo "In swarm/docker-compose.swarm-collector.yml, the collector healthcheck is:"
          cat /tmp/swarm-health | sed 's/^/  /'
          echo ""
          echo "TO FIX: Copy the healthcheck section from docker-compose.yml to swarm/docker-compose.swarm-collector.yml"
          exit 1
        fi
        
        # Compare environment variables (excluding HOSTNAME which is handled differently)
        echo ""
        echo "=== Checking environment variables ==="
        sed -n '/^  collector:/,/^  [^ ]/p' docker-compose.yml | sed -n '/environment:/,/^    [^ ]/p' | grep "    - " | grep -v HOSTNAME | sort > /tmp/main-env
        sed -n '/^  collector:/,/^  [^ ]/p' swarm/docker-compose.swarm-collector.yml | sed -n '/environment:/,/^    [^ ]/p' | grep "    - " | sort > /tmp/swarm-env
        
        if diff -q /tmp/main-env /tmp/swarm-env > /dev/null 2>&1; then
          echo "✅ Environment variables match (excluding HOSTNAME)"
        else
          echo "❌ ERROR: Environment variables must match between files (except HOSTNAME)"
          echo ""
          echo "Environment variables that should be in swarm/docker-compose.swarm-collector.yml but are missing:"
          comm -23 /tmp/main-env /tmp/swarm-env | sed 's/^/  + /'
          echo ""
          echo "Environment variables in swarm/docker-compose.swarm-collector.yml that shouldn't be there:"
          comm -13 /tmp/main-env /tmp/swarm-env | sed 's/^/  - /'
          echo ""
          echo "TO FIX: Update the environment section in swarm/docker-compose.swarm-collector.yml to match docker-compose.yml (keep HOSTNAME as-is)"
          exit 1
        fi
        
        # Check ports - extract port numbers from main compose
        echo ""
        echo "=== Checking port exposure ==="
        # Extract all port numbers from main collector service
        MAIN_PORTS=$(sed -n '/^  collector:/,/^  [^ ]/p' docker-compose.yml | grep -oE '[0-9]{4,5}:' | sed 's/:$//' | sort -u)
        
        ERRORS=""
        for PORT in $MAIN_PORTS; do
          if ! sed -n '/^  collector:/,/^  [^ ]/p' swarm/docker-compose.swarm-collector.yml | grep -q "$PORT"; then
            ERRORS="$ERRORS\n  - Port $PORT is missing"
          fi
        done
        
        if [ -z "$ERRORS" ]; then
          PORTS_LIST=$(echo $MAIN_PORTS | tr '\n' ', ' | sed 's/, $//')
          echo "✅ Both files expose required ports ($PORTS_LIST)"
        else
          echo "❌ ERROR: Required ports are missing in swarm/docker-compose.swarm-collector.yml"
          echo -e "$ERRORS"
          echo ""
          echo "TO FIX: Add the missing ports to swarm/docker-compose.swarm-collector.yml"
          echo "Use this format for swarm:"
          echo "    ports:"
          for PORT in $MAIN_PORTS; do
            echo "      - target: $PORT"
            echo "        published: $PORT"
            echo "        protocol: tcp"
            echo "        mode: host"
          done
          exit 1
        fi
        
        # Check volumes - extract key mount patterns from main compose
        echo ""
        echo "=== Checking volume mounts ==="
        # Extract volumes from main collector, looking for key patterns
        MAIN_VOLUMES=$(sed -n '/^  collector:/,/^  [^ ]/p' docker-compose.yml | sed -n '/volumes:/,/^    [^ ]/p' | grep "^\s*-" | sed 's/^\s*- //')
        
        ERRORS=""
        # Check for host mount (any path mounting to /host:ro)
        if ! sed -n '/^  collector:/,/^  [^ ]/p' swarm/docker-compose.swarm-collector.yml | grep -q "/host:ro"; then
          ERRORS="$ERRORS\n  - Host filesystem mount (should be /:/host:ro)"
        fi
        
        # Check for enrichment mount
        if ! sed -n '/^  collector:/,/^  [^ ]/p' swarm/docker-compose.swarm-collector.yml | grep -q "enrichment"; then
          ERRORS="$ERRORS\n  - Enrichment directory mount"
        fi
        
        if [ -z "$ERRORS" ]; then
          echo "✅ Required volume mount patterns are present (host filesystem + enrichment)"
        else
          echo "❌ ERROR: Required volume mounts are missing in swarm/docker-compose.swarm-collector.yml"
          echo -e "$ERRORS"
          echo ""
          echo "TO FIX: Ensure these volume patterns exist in swarm/docker-compose.swarm-collector.yml:"
          echo "    volumes:"
          echo "      - /:/host:ro  # Host filesystem access"
          echo "      - /var/lib/better-stack/enrichment:/enrichment:rw  # Shared enrichment data"
          exit 1
        fi
        
        echo ""
        echo "=== Checking beyla service alignment ==="
        
        # Compare beyla images
        MAIN_BEYLA_IMAGE=$(sed -n '/^  beyla:/,/^[^ ]/p' docker-compose.yml | grep "image:" | head -1 | awk '{print $2}')
        SWARM_BEYLA_IMAGE=$(sed -n '/^  beyla:/,/^[^ ]/p' swarm/docker-compose.beyla.yml | grep "image:" | head -1 | awk '{print $2}')
        
        if [ "$MAIN_BEYLA_IMAGE" != "$SWARM_BEYLA_IMAGE" ]; then
          echo "❌ ERROR: Beyla image mismatch"
          echo "  Main:  $MAIN_BEYLA_IMAGE"
          echo "  Swarm: $SWARM_BEYLA_IMAGE"
          exit 1
        fi
        echo "✅ Both use beyla image: $MAIN_BEYLA_IMAGE"
        
        # Compare critical beyla configurations
        echo ""
        echo "=== Checking beyla critical settings ==="
        
        # Extract beyla configs for comparison
        sed -n '/^  beyla:/,/^[^ ]/p' docker-compose.yml | grep -E "(privileged:|pid:|network_mode:|mem_limit:|GOMEMLIMIT)" > /tmp/main-beyla-critical
        sed -n '/^  beyla:/,/^[^ ]/p' swarm/docker-compose.beyla.yml | grep -E "(privileged:|pid:|network_mode:|mem_limit:|GOMEMLIMIT)" > /tmp/swarm-beyla-critical
        
        # Check each critical setting
        MISSING_SETTINGS=""
        for setting in "privileged: true" "pid: host" "network_mode: host"; do
          if ! grep -q "$setting" /tmp/swarm-beyla-critical; then
            MISSING_SETTINGS="$MISSING_SETTINGS\n  - $setting"
          fi
        done
        
        # Check memory settings
        if ! grep -q "mem_limit:" /tmp/swarm-beyla-critical; then
          MISSING_SETTINGS="$MISSING_SETTINGS\n  - mem_limit: 1536m"
        fi
        if ! grep -q "GOMEMLIMIT" /tmp/swarm-beyla-critical; then
          MISSING_SETTINGS="$MISSING_SETTINGS\n  - GOMEMLIMIT=1400MiB (in environment section)"
        fi
        
        if [ -z "$MISSING_SETTINGS" ]; then
          echo "✅ All critical beyla settings are present"
        else
          echo "❌ ERROR: Critical beyla settings are missing in swarm/docker-compose.beyla.yml"
          echo -e "$MISSING_SETTINGS"
          echo ""
          echo "TO FIX: Add these settings to the beyla service in swarm/docker-compose.beyla.yml"
          echo "Look at the beyla service in docker-compose.yml for the correct configuration"
          exit 1
        fi
        
        echo ""
        echo "✅ All critical configurations are properly aligned between main and swarm compose files"