name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true # runs 'bundle install' and caches installed gems automatically

    - name: Install dependencies
      run: bundle install

    - name: Run tests
      run: bundle exec rake test

    - name: Validate Docker compose build
      run: docker compose build --no-cache

  # The diff is expected to be:
  # 8a9,10
  # >     security_opt:
  # >       - seccomp=collector-seccomp.json
  # if there are more lines, it's likely drift and shouldn't be released
  docker-compose-match:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: check diff between docker-compose.yml and docker-compose.seccomp.yml
      run: |
        DIFF_LINES=$(diff docker-compose.yml docker-compose.seccomp.yml | wc -l)
        if [ "$DIFF_LINES" -ne 3 ]; then
          echo "ERROR: Expected exactly 3 lines of diff, but got $DIFF_LINES lines"
          echo "Diff output:"
          diff docker-compose.yml docker-compose.seccomp.yml
          exit 1
        fi
        echo "✓ Diff is exactly 3 lines as expected"

  # Check that swarm docker-compose files don't diverge too much from the main ones
  # Best effort, completely Claude generated check. The files will drift if we don't have it. But feel free to redo/replace as needed.
  swarm-compose-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Split main docker-compose.yml and compare with swarm files
      run: |
        echo "=== Splitting main docker-compose.yml into collector and beyla services ==="
        
        # Extract collector service from main compose
        awk '
          /^services:/ { in_services = 1 }
          in_services && /^  collector:/ { in_collector = 1 }
          in_collector && /^  [^ ]/ && !/^  collector:/ { in_collector = 0 }
          in_collector { print }
        ' docker-compose.yml > /tmp/main-collector.yml
        
        # Extract beyla service from main compose
        awk '
          /^services:/ { in_services = 1 }
          in_services && /^  beyla:/ { in_beyla = 1 }
          in_beyla && /^  [^ ]/ && !/^  beyla:/ { in_beyla = 0 }
          in_beyla { print }
          /^volumes:/ { in_beyla = 0; in_volumes = 1 }
          in_volumes { print }
        ' docker-compose.yml > /tmp/main-beyla.yml
        
        echo "=== Comparing collector services ==="
        
        # Compare images
        MAIN_COLLECTOR_IMAGE=$(grep "image:" /tmp/main-collector.yml | awk '{print $2}')
        SWARM_COLLECTOR_IMAGE=$(grep "image:" swarm/docker-compose.swarm-collector.yml | head -1 | awk '{print $2}')
        
        if [ "$MAIN_COLLECTOR_IMAGE" != "$SWARM_COLLECTOR_IMAGE" ]; then
          echo "ERROR: Collector image mismatch"
          echo "  Main:  $MAIN_COLLECTOR_IMAGE"
          echo "  Swarm: $SWARM_COLLECTOR_IMAGE"
          exit 1
        else
          echo "✓ Both use collector image: $MAIN_COLLECTOR_IMAGE"
        fi
        
        # Compare healthchecks
        echo ""
        echo "Checking healthcheck configuration..."
        grep -A5 "healthcheck:" /tmp/main-collector.yml > /tmp/main-collector-health || true
        grep -A5 "healthcheck:" swarm/docker-compose.swarm-collector.yml > /tmp/swarm-collector-health || true
        
        if [ ! -s /tmp/main-collector-health ]; then
          echo "ERROR: No healthcheck in main collector"
          exit 1
        fi
        
        if [ ! -s /tmp/swarm-collector-health ]; then
          echo "ERROR: No healthcheck in swarm collector"
          exit 1
        fi
        
        if diff -q /tmp/main-collector-health /tmp/swarm-collector-health > /dev/null 2>&1; then
          echo "✓ Healthcheck configurations match"
        else
          echo "WARNING: Healthcheck configurations differ slightly"
          diff -u /tmp/main-collector-health /tmp/swarm-collector-health || true
        fi
        
        # Compare environment variables
        echo ""
        echo "Checking environment variables..."
        # Extract environment section more precisely - stop at next section
        awk '/environment:/{f=1; next} f && /^[[:space:]]*[^[:space:]-]/{f=0} f && /^[[:space:]]*-/' /tmp/main-collector.yml | grep -v "HOSTNAME" | sed 's/^[[:space:]]*//' | sort > /tmp/main-collector-env
        awk '/environment:/{f=1; next} f && /^[[:space:]]*[^[:space:]-]/{f=0} f && /^[[:space:]]*-/' swarm/docker-compose.swarm-collector.yml | grep -v "HOSTNAME" | sed 's/^[[:space:]]*//' | sort > /tmp/swarm-collector-env
        
        if diff -q /tmp/main-collector-env /tmp/swarm-collector-env > /dev/null 2>&1; then
          echo "✓ Environment variables match (excluding HOSTNAME)"
        else
          echo "INFO: Environment variables differ:"
          echo "Main only:"
          comm -23 /tmp/main-collector-env /tmp/swarm-collector-env | sed 's/^/  /'
          echo "Swarm only:"
          comm -13 /tmp/main-collector-env /tmp/swarm-collector-env | sed 's/^/  /'
        fi
        
        # Check ports (expect differences in format)
        echo ""
        echo "Checking port configurations..."
        # Extract ports from main
        awk '/ports:/{f=1; next} f && /^[[:space:]]*[^[:space:]-]/{f=0} f' /tmp/main-collector.yml > /tmp/main-collector-ports
        # Extract ports from swarm
        awk '/ports:/{f=1; next} f && /^[[:space:]]*[^[:space:]-]/{f=0} f' swarm/docker-compose.swarm-collector.yml > /tmp/swarm-collector-ports
        
        # Check that both expose 33000 and 34320
        if grep -q "33000" /tmp/main-collector-ports && grep -q "34320" /tmp/main-collector-ports; then
          echo "✓ Main exposes ports 33000 and 34320"
        else
          echo "✗ Main missing required ports"
          ERRORS=$((ERRORS + 1))
        fi
        
        if grep -q "33000" /tmp/swarm-collector-ports && grep -q "34320" /tmp/swarm-collector-ports; then
          echo "✓ Swarm exposes ports 33000 and 34320"
        else
          echo "✗ Swarm missing required ports"
          ERRORS=$((ERRORS + 1))
        fi
        
        # Check volume mounts (expect differences)
        echo ""
        echo "Checking volume mounts..."
        # Extract volumes section more precisely
        awk '/volumes:/{f=1; next} f && /^[[:space:]]*[^[:space:]-]/{f=0} f && /^[[:space:]]*-/' /tmp/main-collector.yml | sed 's/^[[:space:]]*//' > /tmp/main-collector-vol
        awk '/volumes:/{f=1; next} f && /^[[:space:]]*[^[:space:]-]/{f=0} f && /^[[:space:]]*-/' swarm/docker-compose.swarm-collector.yml | sed 's/^[[:space:]]*//' > /tmp/swarm-collector-vol
        
        echo "INFO: Volume mounts (expected to differ):"
        echo "Main: $(cat /tmp/main-collector-vol | wc -l) mounts"
        echo "Swarm: $(cat /tmp/swarm-collector-vol | wc -l) mounts"
        
        # Check both have host filesystem and enrichment mounts
        if grep -q "/host:ro" /tmp/main-collector-vol && grep -q "enrichment" /tmp/main-collector-vol; then
          echo "✓ Main has required mounts (host filesystem + enrichment)"
        else
          echo "✗ Main missing required mounts"
          ERRORS=$((ERRORS + 1))
        fi
        
        if grep -q "/host:ro" /tmp/swarm-collector-vol && grep -q "enrichment" /tmp/swarm-collector-vol; then
          echo "✓ Swarm has required mounts (host filesystem + enrichment)"
        else
          echo "✗ Swarm missing required mounts"
          ERRORS=$((ERRORS + 1))
        fi
        
        # Check if we had any errors in collector comparison
        if [ $ERRORS -gt 0 ]; then
          echo ""
          echo "ERROR: Found $ERRORS critical differences in collector service"
          exit 1
        fi
        
        echo ""
        echo "=== Comparing beyla services ==="
        
        # Compare beyla images
        MAIN_BEYLA_IMAGE=$(grep "image:" /tmp/main-beyla.yml | head -1 | awk '{print $2}')
        SWARM_BEYLA_IMAGE=$(grep "image:" swarm/docker-compose.beyla.yml | head -1 | awk '{print $2}')
        
        if [ "$MAIN_BEYLA_IMAGE" != "$SWARM_BEYLA_IMAGE" ]; then
          echo "ERROR: Beyla image mismatch"
          echo "  Main:  $MAIN_BEYLA_IMAGE"
          echo "  Swarm: $SWARM_BEYLA_IMAGE"
          exit 1
        else
          echo "✓ Both use beyla image: $MAIN_BEYLA_IMAGE"
        fi
        
        # Check critical beyla settings
        echo ""
        echo "Checking critical beyla settings..."
        ERRORS=0
        
        for setting in "privileged: true" "pid: host" "network_mode: host" "mem_limit:" "GOMEMLIMIT"; do
          if grep -q "$setting" /tmp/main-beyla.yml; then
            echo -n "✓ Main has $setting"
          else
            echo -n "✗ Main missing $setting"
            ERRORS=$((ERRORS + 1))
          fi
          
          if grep -q "$setting" swarm/docker-compose.beyla.yml; then
            echo " | ✓ Swarm has $setting"
          else
            echo " | ✗ Swarm missing $setting"
            ERRORS=$((ERRORS + 1))
          fi
        done
        
        # Check beyla environment variables
        echo ""
        echo "Checking beyla environment variables..."
        # Extract environment section more precisely - stop at next section
        awk '/environment:/{f=1; next} f && /^[[:space:]]*[^[:space:]-]/{f=0} f && /^[[:space:]]*-/' /tmp/main-beyla.yml | sed 's/^[[:space:]]*//' | sort > /tmp/main-beyla-env
        awk '/environment:/{f=1; next} f && /^[[:space:]]*[^[:space:]-]/{f=0} f && /^[[:space:]]*-/' swarm/docker-compose.beyla.yml | sed 's/^[[:space:]]*//' | sort > /tmp/swarm-beyla-env
        
        # Key environment variables that must be present in both
        for var in "GOMEMLIMIT" "HOSTNAME" "OTEL_EXPORTER_OTLP_ENDPOINT" "BEYLA_BPF_CONTEXT_PROPAGATION" "ENABLE_DOCKERPROBE"; do
          if grep -q "$var" /tmp/main-beyla-env && grep -q "$var" /tmp/swarm-beyla-env; then
            echo "✓ Both have $var"
          else
            echo "✗ Missing $var in one of the configs"
            ERRORS=$((ERRORS + 1))
          fi
        done
        
        if [ $ERRORS -gt 0 ]; then
          echo ""
          echo "ERROR: Found $ERRORS critical differences"
          exit 1
        fi
        
        echo ""
        echo "✅ All critical configurations are properly aligned between main and swarm compose files"
